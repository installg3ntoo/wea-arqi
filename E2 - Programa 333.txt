DATA:
  // Variables locales para subrutina de multiplicación
  mult_a 0 // 0 - 1
  mult_b 0 // 2 - 3
  mult_r 0 // 4 - 5

  // Variables locales para subrutina de potencia
  pow_b 0 // 6 - 7
  pow_e 0 // 8 - 9
  pow_r 0 // 10 - 11

CODE: // Potencia

MOV A,4 // 12
MOV B,3 // 13
CALL pow // 14

end:
JMP end // 15

// Subrutina de potencia
pow:               // Base A y Exponente en B, Retorna el resultado en A
  MOV (pow_b),A // 16
  MOV (pow_e),B // 17
  PUSH B // 18
  MOV B,1 // 19
  MOV (pow_r),B // 20
  pow_loop:
    MOV A,(pow_e) // 21
    CMP A,0 // 22
    JEQ pow_end // 23
    MOV A,(pow_r) // 24
    MOV B,(pow_b) // 25
    CALL mult // 26
    MOV (pow_r),A // 27
    MOV A,(pow_e) // 28
    SUB A,1 // 29
    MOV (pow_e),A // 30
  JMP pow_loop // 31
  pow_end:
  MOV A,(pow_r) // 32
  POP B  // 33 - 34
  RET // 35

// Subrutina de multiplicación
mult:              // Operandos en A y B, Retorna el resultado en A
  MOV (mult_a),A
  MOV (mult_b),B
  PUSH B
  MOV B,0
  MOV (mult_r),B
  mult_loop:
    MOV A,(mult_a)
    CMP A,0
    JEQ mult_end
    AND A,1
    CMP A,0
    JEQ no_sum
      MOV A,(mult_r)
      MOV B,(mult_b)
      ADD (mult_r)
    no_sum:
    MOV A,(mult_a)
    SHR (mult_a),A
    MOV A,(mult_b)
    SHL (mult_b),A
    JMP mult_loop 
  mult_end:
  MOV A,(mult_r)
  POP B  
  RET